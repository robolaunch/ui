/* tslint:disable */
/* eslint-disable */
/**
 * code-with-quarkus API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'clientName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'clientId'?: string;
}
/**
 * 
 * @export
 * @interface ClientRepresentation
 */
export interface ClientRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'rootUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'adminUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'baseUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'surrogateAuthRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'alwaysDisplayInConsole'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'clientAuthenticatorType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'registrationAccessToken'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'defaultRoles'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'redirectUris'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'webOrigins'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ClientRepresentation
     */
    'notBefore'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'bearerOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'consentRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'standardFlowEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'implicitFlowEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'directAccessGrantsEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'serviceAccountsEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'oauth2DeviceAuthorizationGrantEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'authorizationServicesEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'directGrantsOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'publicClient'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'frontchannelLogout'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'protocol'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ClientRepresentation
     */
    'attributes'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ClientRepresentation
     */
    'authenticationFlowBindingOverrides'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'fullScopeAllowed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ClientRepresentation
     */
    'nodeReRegistrationTimeout'?: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof ClientRepresentation
     */
    'registeredNodes'?: { [key: string]: number; };
    /**
     * 
     * @type {Array<ProtocolMapperRepresentation>}
     * @memberof ClientRepresentation
     */
    'protocolMappers'?: Array<ProtocolMapperRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'clientTemplate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'useTemplateConfig'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'useTemplateScope'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'useTemplateMappers'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'defaultClientScopes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'optionalClientScopes'?: Array<string>;
    /**
     * 
     * @type {ResourceServerRepresentation}
     * @memberof ClientRepresentation
     */
    'authorizationSettings'?: ResourceServerRepresentation;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof ClientRepresentation
     */
    'access'?: { [key: string]: boolean; };
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'origin'?: string;
}
/**
 * 
 * @export
 * @interface CloudInstance
 */
export interface CloudInstance {
    /**
     * 
     * @type {string}
     * @memberof CloudInstance
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudInstance
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudInstance
     */
    'instanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudInstance
     */
    'instanceType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudInstance
     */
    'organizationName'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DecisionStrategy = {
    Affirmative: 'AFFIRMATIVE',
    Unanimous: 'UNANIMOUS',
    Consensus: 'CONSENSUS'
} as const;

export type DecisionStrategy = typeof DecisionStrategy[keyof typeof DecisionStrategy];


/**
 * 
 * @export
 * @interface GroupRepresentation
 */
export interface GroupRepresentation {
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    'path'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupRepresentation
     */
    'attributes'?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupRepresentation
     */
    'realmRoles'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupRepresentation
     */
    'clientRoles'?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<GroupRepresentation>}
     * @memberof GroupRepresentation
     */
    'subGroups'?: Array<GroupRepresentation>;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof GroupRepresentation
     */
    'access'?: { [key: string]: boolean; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Logic = {
    Positive: 'POSITIVE',
    Negative: 'NEGATIVE'
} as const;

export type Logic = typeof Logic[keyof typeof Logic];


/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof Member
     */
    'lastLoginTime'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'isCurrentMemberUser'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'isCurrentMemberAdmin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'isCurrentMemberGuest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'admin'?: boolean;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'guestGroupName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'guestGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'adminGroupName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'adminGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationMembershipGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationGuestGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationAdminGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'requestIsFor'?: string;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'teamCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'userCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'organizationPathLevel'?: number;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'searchQuery'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentUserEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentClientId'?: string;
    /**
     * 
     * @type {Array<GroupRepresentation>}
     * @memberof Organization
     */
    'currentUserGroups'?: Array<GroupRepresentation>;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'isCurrentMemberUser'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'isCurrentMemberAdmin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'isCurrentMemberGuest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserLastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserFirstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserOrganizationGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserAdminGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserGuestGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserSearchString'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserSearchType'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperServerUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperRealm'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperClientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperClientName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperSecret'?: string;
    /**
     * 
     * @type {ClientRepresentation}
     * @memberof Organization
     */
    'gatekeeperClient'?: ClientRepresentation;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Organization
     */
    'users'?: Array<Member>;
    /**
     * 
     * @type {Array<Team>}
     * @memberof Organization
     */
    'teams'?: Array<Team>;
    /**
     * 
     * @type {Array<Client>}
     * @memberof Organization
     */
    'clients'?: Array<Client>;
}
/**
 * 
 * @export
 * @interface PlainResponse
 */
export interface PlainResponse {
    /**
     * 
     * @type {string}
     * @memberof PlainResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlainResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<Organization>}
     * @memberof PlainResponse
     */
    'data'?: Array<Organization>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PolicyEnforcementMode = {
    Enforcing: 'ENFORCING',
    Permissive: 'PERMISSIVE',
    Disabled: 'DISABLED'
} as const;

export type PolicyEnforcementMode = typeof PolicyEnforcementMode[keyof typeof PolicyEnforcementMode];


/**
 * 
 * @export
 * @interface PolicyRepresentation
 */
export interface PolicyRepresentation {
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'type'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    'policies'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    'resources'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    'scopes'?: Set<string>;
    /**
     * 
     * @type {Logic}
     * @memberof PolicyRepresentation
     */
    'logic'?: Logic;
    /**
     * 
     * @type {DecisionStrategy}
     * @memberof PolicyRepresentation
     */
    'decisionStrategy'?: DecisionStrategy;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'owner'?: string;
    /**
     * 
     * @type {Set<ResourceRepresentation>}
     * @memberof PolicyRepresentation
     */
    'resourcesData'?: Set<ResourceRepresentation>;
    /**
     * 
     * @type {Set<ScopeRepresentation>}
     * @memberof PolicyRepresentation
     */
    'scopesData'?: Set<ScopeRepresentation>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PolicyRepresentation
     */
    'config'?: { [key: string]: string; };
}


/**
 * 
 * @export
 * @interface ProtocolMapperRepresentation
 */
export interface ProtocolMapperRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'protocol'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'protocolMapper'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProtocolMapperRepresentation
     * @deprecated
     */
    'consentRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     * @deprecated
     */
    'consentText'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProtocolMapperRepresentation
     */
    'config'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ResourceOwnerRepresentation
 */
export interface ResourceOwnerRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ResourceOwnerRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceOwnerRepresentation
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ResourceRepresentation
 */
export interface ResourceRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ResourceRepresentation
     */
    'uris'?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'type'?: string;
    /**
     * 
     * @type {Set<ScopeRepresentation>}
     * @memberof ResourceRepresentation
     */
    'scopes'?: Set<ScopeRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'icon_uri'?: string;
    /**
     * 
     * @type {ResourceRepresentationOwner}
     * @memberof ResourceRepresentation
     */
    'owner'?: ResourceRepresentationOwner;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceRepresentation
     */
    'ownerManagedAccess'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'displayName'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ResourceRepresentation
     */
    'attributes'?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     * @deprecated
     */
    'uri'?: string;
    /**
     * 
     * @type {Set<ScopeRepresentation>}
     * @memberof ResourceRepresentation
     */
    'scopesUma'?: Set<ScopeRepresentation>;
}
/**
 * 
 * @export
 * @interface ResourceRepresentationOwner
 */
export interface ResourceRepresentationOwner {
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentationOwner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentationOwner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ResourceServerRepresentation
 */
export interface ResourceServerRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceServerRepresentation
     */
    'allowRemoteResourceManagement'?: boolean;
    /**
     * 
     * @type {PolicyEnforcementMode}
     * @memberof ResourceServerRepresentation
     */
    'policyEnforcementMode'?: PolicyEnforcementMode;
    /**
     * 
     * @type {Array<ResourceRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    'resources'?: Array<ResourceRepresentation>;
    /**
     * 
     * @type {Array<PolicyRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    'policies'?: Array<PolicyRepresentation>;
    /**
     * 
     * @type {Array<ScopeRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    'scopes'?: Array<ScopeRepresentation>;
    /**
     * 
     * @type {DecisionStrategy}
     * @memberof ResourceServerRepresentation
     */
    'decisionStrategy'?: DecisionStrategy;
}


/**
 * 
 * @export
 * @interface RobolaunchFederatedFleet
 */
export interface RobolaunchFederatedFleet {
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedFleet
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedFleet
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedFleet
     */
    'instanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedFleet
     */
    'organizationName'?: string;
}
/**
 * 
 * @export
 * @interface RobolaunchFederatedRobot
 */
export interface RobolaunchFederatedRobot {
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'fleetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'cloudRegion'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'cloudInstanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'physicalInstance'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'organizationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'buildManagerName'?: string;
    /**
     * 
     * @type {Array<RobotWorkspace>}
     * @memberof RobolaunchFederatedRobot
     */
    'robotWorkspaces'?: Array<RobotWorkspace>;
    /**
     * 
     * @type {Array<RobotBuildStep>}
     * @memberof RobolaunchFederatedRobot
     */
    'robotBuildSteps'?: Array<RobotBuildStep>;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'distribution'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RobolaunchFederatedRobot
     */
    'bridgeEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RobolaunchFederatedRobot
     */
    'vdiEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RobolaunchFederatedRobot
     */
    'vdiSessionCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof RobolaunchFederatedRobot
     */
    'vdiGpuResource'?: number;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'vdiWebRtcPort'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RobolaunchFederatedRobot
     */
    'vdiPrivileged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'vdiServiceType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RobolaunchFederatedRobot
     */
    'ideEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RobolaunchFederatedRobot
     */
    'ideGpuResource'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RobolaunchFederatedRobot
     */
    'idePrivileged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'ideServiceType'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchFederatedRobot
     */
    'rosBridgeDistro'?: string;
    /**
     * 
     * @type {number}
     * @memberof RobolaunchFederatedRobot
     */
    'storageAmount'?: number;
}
/**
 * 
 * @export
 * @interface RobolaunchPhysicalInstance
 */
export interface RobolaunchPhysicalInstance {
    /**
     * 
     * @type {string}
     * @memberof RobolaunchPhysicalInstance
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchPhysicalInstance
     */
    'fleetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchPhysicalInstance
     */
    'robotName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchPhysicalInstance
     */
    'buildManagerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchPhysicalInstance
     */
    'cloudInstanceRegion'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchPhysicalInstance
     */
    'cloudInstanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobolaunchPhysicalInstance
     */
    'organizationName'?: string;
}
/**
 * 
 * @export
 * @interface RobotBuildStep
 */
export interface RobotBuildStep {
    /**
     * 
     * @type {string}
     * @memberof RobotBuildStep
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobotBuildStep
     */
    'workspace'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobotBuildStep
     */
    'command'?: string;
    /**
     * 
     * @type {Array<CloudInstance>}
     * @memberof RobotBuildStep
     */
    'cloudInstances'?: Array<CloudInstance>;
    /**
     * 
     * @type {string}
     * @memberof RobotBuildStep
     */
    'comamnd'?: string;
}
/**
 * 
 * @export
 * @interface RobotRepository
 */
export interface RobotRepository {
    /**
     * 
     * @type {string}
     * @memberof RobotRepository
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobotRepository
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobotRepository
     */
    'branch'?: string;
}
/**
 * 
 * @export
 * @interface RobotWorkspace
 */
export interface RobotWorkspace {
    /**
     * 
     * @type {string}
     * @memberof RobotWorkspace
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RobotWorkspace
     */
    'workspaceDistro'?: string;
    /**
     * 
     * @type {Array<RobotRepository>}
     * @memberof RobotWorkspace
     */
    'robotRepositories'?: Array<RobotRepository>;
}
/**
 * 
 * @export
 * @interface ScopeRepresentation
 */
export interface ScopeRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'iconUri'?: string;
    /**
     * 
     * @type {Array<PolicyRepresentation>}
     * @memberof ScopeRepresentation
     */
    'policies'?: Array<PolicyRepresentation>;
    /**
     * 
     * @type {Array<ResourceRepresentation>}
     * @memberof ScopeRepresentation
     */
    'resources'?: Array<ResourceRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'displayName'?: string;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamName'?: string;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Team
     */
    'guestUsers'?: Array<Member>;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Team
     */
    'adminUsers'?: Array<Member>;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Team
     */
    'users'?: Array<Member>;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamPath'?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'teamPathLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'userCount'?: number;
}

/**
 * AwsApi - axios parameter creator
 * @export
 */
export const AwsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInstances: async (cloudInstance?: CloudInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aws/getAllInstances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AwsApi - functional programming interface
 * @export
 */
export const AwsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AwsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInstances(cloudInstance?: CloudInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllInstances(cloudInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AwsApi - factory interface
 * @export
 */
export const AwsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AwsApiFp(configuration)
    return {
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInstances(cloudInstance?: CloudInstance, options?: any): AxiosPromise<string> {
            return localVarFp.getAllInstances(cloudInstance, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AwsApi - object-oriented interface
 * @export
 * @class AwsApi
 * @extends {BaseAPI}
 */
export class AwsApi extends BaseAPI {
    /**
     * 
     * @param {CloudInstance} [cloudInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsApi
     */
    public getAllInstances(cloudInstance?: CloudInstance, options?: AxiosRequestConfig) {
        return AwsApiFp(this.configuration).getAllInstances(cloudInstance, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreateInstanceApi - axios parameter creator
 * @export
 */
export const CreateInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance: async (cloudInstance?: CloudInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud/createInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceState: async (cloudInstance?: CloudInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud/getInstanceState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoboticsCloudState: async (cloudInstance?: CloudInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud/getRoboticsCloudState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startInstance: async (cloudInstance?: CloudInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud/startInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopInstance: async (cloudInstance?: CloudInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud/stopInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateInstance: async (cloudInstance?: CloudInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud/terminateInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateInstanceApi - functional programming interface
 * @export
 */
export const CreateInstanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateInstanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstance(cloudInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceState(cloudInstance?: CloudInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstanceState(cloudInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoboticsCloudState(cloudInstance?: CloudInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoboticsCloudState(cloudInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startInstance(cloudInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopInstance(cloudInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateInstance(cloudInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreateInstanceApi - factory interface
 * @export
 */
export const CreateInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateInstanceApiFp(configuration)
    return {
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstance(cloudInstance?: CloudInstance, options?: any): AxiosPromise<string> {
            return localVarFp.createInstance(cloudInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceState(cloudInstance?: CloudInstance, options?: any): AxiosPromise<string> {
            return localVarFp.getInstanceState(cloudInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoboticsCloudState(cloudInstance?: CloudInstance, options?: any): AxiosPromise<string> {
            return localVarFp.getRoboticsCloudState(cloudInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startInstance(cloudInstance?: CloudInstance, options?: any): AxiosPromise<void> {
            return localVarFp.startInstance(cloudInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopInstance(cloudInstance?: CloudInstance, options?: any): AxiosPromise<void> {
            return localVarFp.stopInstance(cloudInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudInstance} [cloudInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateInstance(cloudInstance?: CloudInstance, options?: any): AxiosPromise<string> {
            return localVarFp.terminateInstance(cloudInstance, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreateInstanceApi - object-oriented interface
 * @export
 * @class CreateInstanceApi
 * @extends {BaseAPI}
 */
export class CreateInstanceApi extends BaseAPI {
    /**
     * 
     * @param {CloudInstance} [cloudInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateInstanceApi
     */
    public createInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig) {
        return CreateInstanceApiFp(this.configuration).createInstance(cloudInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudInstance} [cloudInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateInstanceApi
     */
    public getInstanceState(cloudInstance?: CloudInstance, options?: AxiosRequestConfig) {
        return CreateInstanceApiFp(this.configuration).getInstanceState(cloudInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudInstance} [cloudInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateInstanceApi
     */
    public getRoboticsCloudState(cloudInstance?: CloudInstance, options?: AxiosRequestConfig) {
        return CreateInstanceApiFp(this.configuration).getRoboticsCloudState(cloudInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudInstance} [cloudInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateInstanceApi
     */
    public startInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig) {
        return CreateInstanceApiFp(this.configuration).startInstance(cloudInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudInstance} [cloudInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateInstanceApi
     */
    public stopInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig) {
        return CreateInstanceApiFp(this.configuration).stopInstance(cloudInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudInstance} [cloudInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateInstanceApi
     */
    public terminateInstance(cloudInstance?: CloudInstance, options?: AxiosRequestConfig) {
        return CreateInstanceApiFp(this.configuration).terminateInstance(cloudInstance, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KubernetesApi - axios parameter creator
 * @export
 */
export const KubernetesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPhysicalInstance: async (robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kubernetes/addPhysicalInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchPhysicalInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPhysicalInstanceToFleet: async (robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kubernetes/addPhysicalInstanceToFleet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchPhysicalInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFederatedFleet: async (robolaunchFederatedFleet?: RobolaunchFederatedFleet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kubernetes/createFederatedFleet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedFleet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFederatedFleet: async (robolaunchFederatedFleet?: RobolaunchFederatedFleet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kubernetes/deleteFederatedFleet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedFleet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedFleetStatus: async (robolaunchFederatedFleet?: RobolaunchFederatedFleet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kubernetes/getFederatedFleetStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedFleet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedFleetStatusOfPhysicalInstance: async (robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kubernetes/getFederatedFleetStatusOfPhysicalInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchPhysicalInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedFleets: async (robolaunchFederatedFleet?: RobolaunchFederatedFleet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kubernetes/getFederatedFleets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedFleet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KubernetesApi - functional programming interface
 * @export
 */
export const KubernetesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KubernetesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPhysicalInstance(robolaunchPhysicalInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPhysicalInstanceToFleet(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPhysicalInstanceToFleet(robolaunchPhysicalInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFederatedFleet(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFederatedFleet(robolaunchFederatedFleet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFederatedFleet(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFederatedFleet(robolaunchFederatedFleet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederatedFleetStatus(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederatedFleetStatus(robolaunchFederatedFleet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederatedFleetStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederatedFleetStatusOfPhysicalInstance(robolaunchPhysicalInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederatedFleets(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederatedFleets(robolaunchFederatedFleet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KubernetesApi - factory interface
 * @export
 */
export const KubernetesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KubernetesApiFp(configuration)
    return {
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: any): AxiosPromise<string> {
            return localVarFp.addPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPhysicalInstanceToFleet(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: any): AxiosPromise<string> {
            return localVarFp.addPhysicalInstanceToFleet(robolaunchPhysicalInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFederatedFleet(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: any): AxiosPromise<string> {
            return localVarFp.createFederatedFleet(robolaunchFederatedFleet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFederatedFleet(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: any): AxiosPromise<string> {
            return localVarFp.deleteFederatedFleet(robolaunchFederatedFleet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedFleetStatus(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: any): AxiosPromise<string> {
            return localVarFp.getFederatedFleetStatus(robolaunchFederatedFleet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedFleetStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: any): AxiosPromise<string> {
            return localVarFp.getFederatedFleetStatusOfPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedFleets(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: any): AxiosPromise<string> {
            return localVarFp.getFederatedFleets(robolaunchFederatedFleet, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KubernetesApi - object-oriented interface
 * @export
 * @class KubernetesApi
 * @extends {BaseAPI}
 */
export class KubernetesApi extends BaseAPI {
    /**
     * 
     * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesApi
     */
    public addPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig) {
        return KubernetesApiFp(this.configuration).addPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesApi
     */
    public addPhysicalInstanceToFleet(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig) {
        return KubernetesApiFp(this.configuration).addPhysicalInstanceToFleet(robolaunchPhysicalInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesApi
     */
    public createFederatedFleet(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig) {
        return KubernetesApiFp(this.configuration).createFederatedFleet(robolaunchFederatedFleet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesApi
     */
    public deleteFederatedFleet(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig) {
        return KubernetesApiFp(this.configuration).deleteFederatedFleet(robolaunchFederatedFleet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesApi
     */
    public getFederatedFleetStatus(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig) {
        return KubernetesApiFp(this.configuration).getFederatedFleetStatus(robolaunchFederatedFleet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesApi
     */
    public getFederatedFleetStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig) {
        return KubernetesApiFp(this.configuration).getFederatedFleetStatusOfPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedFleet} [robolaunchFederatedFleet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesApi
     */
    public getFederatedFleets(robolaunchFederatedFleet?: RobolaunchFederatedFleet, options?: AxiosRequestConfig) {
        return KubernetesApiFp(this.configuration).getFederatedFleets(robolaunchFederatedFleet, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationRepositoryImplApi - axios parameter creator
 * @export
 */
export const OrganizationRepositoryImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptMembershipOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/acceptMembership`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/createOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuestFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteGuest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitedOrganizations: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getInvitedOrganizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAdmins: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationAdmins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationGuests: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationGuests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationsWithGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroupsAndUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationsWithGroupsAndUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ifUserCanAccessOrganizationGroups: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/ifUserCanAccessOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/InviteUserToOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAdminAsUserFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/moveToUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveUserAsAdminToOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/moveAsAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationRepositoryImplApi - functional programming interface
 * @export
 */
export const OrganizationRepositoryImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationRepositoryImplApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptMembershipOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptMembershipOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdminFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdminFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGuestFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGuestFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvitedOrganizations(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitedOrganizations(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationAdmins(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationAdmins(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationGuests(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationGuests(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUsers(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUsers(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationsWithGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationsWithGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationsWithGroupsAndUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationsWithGroupsAndUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ifUserCanAccessOrganizationGroups(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ifUserCanAccessOrganizationGroups(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUserToOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUserToOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveAdminAsUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveAdminAsUserFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveUserAsAdminToOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveUserAsAdminToOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationRepositoryImplApi - factory interface
 * @export
 */
export const OrganizationRepositoryImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationRepositoryImplApiFp(configuration)
    return {
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptMembershipOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.acceptMembershipOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.createOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.deleteAdminFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuestFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.deleteGuestFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization(organization?: Organization, options?: any): AxiosPromise<PlainResponse> {
            return localVarFp.deleteOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.deleteUserFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitedOrganizations(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getInvitedOrganizations(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAdmins(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationAdmins(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationGuests(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationGuests(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationUsers(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations(options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroups(options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationsWithGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroupsAndUsers(options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationsWithGroupsAndUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ifUserCanAccessOrganizationGroups(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.ifUserCanAccessOrganizationGroups(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToOrganization(organization?: Organization, options?: any): AxiosPromise<PlainResponse> {
            return localVarFp.inviteUserToOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAdminAsUserFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.moveAdminAsUserFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveUserAsAdminToOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.moveUserAsAdminToOrganization(organization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationRepositoryImplApi - object-oriented interface
 * @export
 * @class OrganizationRepositoryImplApi
 * @extends {BaseAPI}
 */
export class OrganizationRepositoryImplApi extends BaseAPI {
    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public acceptMembershipOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).acceptMembershipOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public createOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).createOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteAdminFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteAdminFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteGuestFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteGuestFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteUserFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getInvitedOrganizations(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getInvitedOrganizations(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationAdmins(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationAdmins(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationGuests(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationGuests(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationUsers(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationUsers(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizations(options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationsWithGroups(options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationsWithGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationsWithGroupsAndUsers(options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationsWithGroupsAndUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public ifUserCanAccessOrganizationGroups(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).ifUserCanAccessOrganizationGroups(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public inviteUserToOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).inviteUserToOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public moveAdminAsUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).moveAdminAsUserFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public moveUserAsAdminToOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).moveUserAsAdminToOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RobotApi - axios parameter creator
 * @export
 */
export const RobotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFederatedRobot: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/createFederatedRobot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFederatedRobot: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/deleteFederatedRobot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotClusters: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/getFederatedRobotClusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotStatus: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/getFederatedRobotStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotStatusOfPhysicalInstance: async (robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/getFederatedRobotStatusOfPhysicalInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchPhysicalInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotWorkspaces: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robot/getFederatedRobotWorkspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RobotApi - functional programming interface
 * @export
 */
export const RobotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RobotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFederatedRobot(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFederatedRobot(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFederatedRobot(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFederatedRobot(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederatedRobotClusters(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederatedRobotClusters(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederatedRobotStatus(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederatedRobotStatus(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederatedRobotStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederatedRobotStatusOfPhysicalInstance(robolaunchPhysicalInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederatedRobotWorkspaces(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederatedRobotWorkspaces(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RobotApi - factory interface
 * @export
 */
export const RobotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RobotApiFp(configuration)
    return {
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFederatedRobot(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.createFederatedRobot(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFederatedRobot(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.deleteFederatedRobot(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotClusters(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.getFederatedRobotClusters(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotStatus(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.getFederatedRobotStatus(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: any): AxiosPromise<string> {
            return localVarFp.getFederatedRobotStatusOfPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederatedRobotWorkspaces(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.getFederatedRobotWorkspaces(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RobotApi - object-oriented interface
 * @export
 * @class RobotApi
 * @extends {BaseAPI}
 */
export class RobotApi extends BaseAPI {
    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotApi
     */
    public createFederatedRobot(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotApiFp(this.configuration).createFederatedRobot(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotApi
     */
    public deleteFederatedRobot(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotApiFp(this.configuration).deleteFederatedRobot(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotApi
     */
    public getFederatedRobotClusters(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotApiFp(this.configuration).getFederatedRobotClusters(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotApi
     */
    public getFederatedRobotStatus(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotApiFp(this.configuration).getFederatedRobotStatus(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotApi
     */
    public getFederatedRobotStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig) {
        return RobotApiFp(this.configuration).getFederatedRobotStatusOfPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotApi
     */
    public getFederatedRobotWorkspaces(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotApiFp(this.configuration).getFederatedRobotWorkspaces(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RobotBuildManagerApi - axios parameter creator
 * @export
 */
export const RobotBuildManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRobotBuildManager: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robotBuildManager/createRobotBuildManager`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRobotBuildManager: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robotBuildManager/deleteRobotBuildManager`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotBuildManagerStatus: async (robolaunchFederatedRobot?: RobolaunchFederatedRobot, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robotBuildManager/getRobotBuildManagerStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchFederatedRobot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotBuildManagerStatusOfPhysicalInstance: async (robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/robotBuildManager/getRobotBuildManagerStatusOfPhysicalInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(robolaunchPhysicalInstance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RobotBuildManagerApi - functional programming interface
 * @export
 */
export const RobotBuildManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RobotBuildManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRobotBuildManager(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRobotBuildManager(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRobotBuildManager(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRobotBuildManager(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRobotBuildManagerStatus(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRobotBuildManagerStatus(robolaunchFederatedRobot, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRobotBuildManagerStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRobotBuildManagerStatusOfPhysicalInstance(robolaunchPhysicalInstance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RobotBuildManagerApi - factory interface
 * @export
 */
export const RobotBuildManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RobotBuildManagerApiFp(configuration)
    return {
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRobotBuildManager(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.createRobotBuildManager(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRobotBuildManager(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.deleteRobotBuildManager(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotBuildManagerStatus(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: any): AxiosPromise<string> {
            return localVarFp.getRobotBuildManagerStatus(robolaunchFederatedRobot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRobotBuildManagerStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: any): AxiosPromise<string> {
            return localVarFp.getRobotBuildManagerStatusOfPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RobotBuildManagerApi - object-oriented interface
 * @export
 * @class RobotBuildManagerApi
 * @extends {BaseAPI}
 */
export class RobotBuildManagerApi extends BaseAPI {
    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotBuildManagerApi
     */
    public createRobotBuildManager(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotBuildManagerApiFp(this.configuration).createRobotBuildManager(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotBuildManagerApi
     */
    public deleteRobotBuildManager(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotBuildManagerApiFp(this.configuration).deleteRobotBuildManager(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchFederatedRobot} [robolaunchFederatedRobot] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotBuildManagerApi
     */
    public getRobotBuildManagerStatus(robolaunchFederatedRobot?: RobolaunchFederatedRobot, options?: AxiosRequestConfig) {
        return RobotBuildManagerApiFp(this.configuration).getRobotBuildManagerStatus(robolaunchFederatedRobot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RobolaunchPhysicalInstance} [robolaunchPhysicalInstance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RobotBuildManagerApi
     */
    public getRobotBuildManagerStatusOfPhysicalInstance(robolaunchPhysicalInstance?: RobolaunchPhysicalInstance, options?: AxiosRequestConfig) {
        return RobotBuildManagerApiFp(this.configuration).getRobotBuildManagerStatusOfPhysicalInstance(robolaunchPhysicalInstance, options).then((request) => request(this.axios, this.basePath));
    }
}


