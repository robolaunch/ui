/* tslint:disable */
/* eslint-disable */
/**
 * serverless-workflow-hello-world API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'clientName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'clientId'?: string;
}
/**
 * 
 * @export
 * @interface ClientRepresentation
 */
export interface ClientRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'rootUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'adminUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'baseUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'surrogateAuthRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'alwaysDisplayInConsole'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'clientAuthenticatorType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'registrationAccessToken'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'defaultRoles'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'redirectUris'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'webOrigins'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ClientRepresentation
     */
    'notBefore'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'bearerOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'consentRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'standardFlowEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'implicitFlowEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'directAccessGrantsEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'serviceAccountsEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'oauth2DeviceAuthorizationGrantEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'authorizationServicesEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'directGrantsOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'publicClient'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'frontchannelLogout'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'protocol'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ClientRepresentation
     */
    'attributes'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ClientRepresentation
     */
    'authenticationFlowBindingOverrides'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     */
    'fullScopeAllowed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ClientRepresentation
     */
    'nodeReRegistrationTimeout'?: number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof ClientRepresentation
     */
    'registeredNodes'?: { [key: string]: number; };
    /**
     * 
     * @type {Array<ProtocolMapperRepresentation>}
     * @memberof ClientRepresentation
     */
    'protocolMappers'?: Array<ProtocolMapperRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'clientTemplate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'useTemplateConfig'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'useTemplateScope'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientRepresentation
     * @deprecated
     */
    'useTemplateMappers'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'defaultClientScopes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRepresentation
     */
    'optionalClientScopes'?: Array<string>;
    /**
     * 
     * @type {ResourceServerRepresentation}
     * @memberof ClientRepresentation
     */
    'authorizationSettings'?: ResourceServerRepresentation;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof ClientRepresentation
     */
    'access'?: { [key: string]: boolean; };
    /**
     * 
     * @type {string}
     * @memberof ClientRepresentation
     */
    'origin'?: string;
}
/**
 * 
 * @export
 * @interface CustomDashboardFilter
 */
export interface CustomDashboardFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomDashboardFilter
     */
    'names'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DecisionStrategy = {
    Affirmative: 'AFFIRMATIVE',
    Unanimous: 'UNANIMOUS',
    Consensus: 'CONSENSUS'
} as const;

export type DecisionStrategy = typeof DecisionStrategy[keyof typeof DecisionStrategy];


/**
 * 
 * @export
 * @interface GroupRepresentation
 */
export interface GroupRepresentation {
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    'path'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupRepresentation
     */
    'attributes'?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupRepresentation
     */
    'realmRoles'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof GroupRepresentation
     */
    'clientRoles'?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<GroupRepresentation>}
     * @memberof GroupRepresentation
     */
    'subGroups'?: Array<GroupRepresentation>;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof GroupRepresentation
     */
    'access'?: { [key: string]: boolean; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Logic = {
    Positive: 'POSITIVE',
    Negative: 'NEGATIVE'
} as const;

export type Logic = typeof Logic[keyof typeof Logic];


/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof Member
     */
    'lastLoginTime'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'isCurrentMemberUser'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'isCurrentMemberAdmin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'isCurrentMemberGuest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Member
     */
    'admin'?: boolean;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'guestGroupName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'guestGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'adminGroupName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'adminGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationMembershipGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationGuestGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationAdminGroupId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'requestIsFor'?: string;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'teamCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'userCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'organizationPathLevel'?: number;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'searchQuery'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentUserEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'currentClientId'?: string;
    /**
     * 
     * @type {Array<GroupRepresentation>}
     * @memberof Organization
     */
    'currentUserGroups'?: Array<GroupRepresentation>;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'isCurrentMemberUser'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'isCurrentMemberAdmin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'isCurrentMemberGuest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserLastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserFirstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserOrganizationGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserAdminGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserGuestGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserSearchString'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'invitedUserSearchType'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperServerUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperRealm'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperClientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperClientName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'gatekeeperSecret'?: string;
    /**
     * 
     * @type {ClientRepresentation}
     * @memberof Organization
     */
    'gatekeeperClient'?: ClientRepresentation;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Organization
     */
    'users'?: Array<Member>;
    /**
     * 
     * @type {Array<Team>}
     * @memberof Organization
     */
    'teams'?: Array<Team>;
    /**
     * 
     * @type {Array<Client>}
     * @memberof Organization
     */
    'clients'?: Array<Client>;
}
/**
 * 
 * @export
 * @interface PlainResponse
 */
export interface PlainResponse {
    /**
     * 
     * @type {string}
     * @memberof PlainResponse
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlainResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<Organization>}
     * @memberof PlainResponse
     */
    'data'?: Array<Organization>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PolicyEnforcementMode = {
    Enforcing: 'ENFORCING',
    Permissive: 'PERMISSIVE',
    Disabled: 'DISABLED'
} as const;

export type PolicyEnforcementMode = typeof PolicyEnforcementMode[keyof typeof PolicyEnforcementMode];


/**
 * 
 * @export
 * @interface PolicyRepresentation
 */
export interface PolicyRepresentation {
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'type'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    'policies'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    'resources'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof PolicyRepresentation
     */
    'scopes'?: Set<string>;
    /**
     * 
     * @type {Logic}
     * @memberof PolicyRepresentation
     */
    'logic'?: Logic;
    /**
     * 
     * @type {DecisionStrategy}
     * @memberof PolicyRepresentation
     */
    'decisionStrategy'?: DecisionStrategy;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepresentation
     */
    'owner'?: string;
    /**
     * 
     * @type {Set<ResourceRepresentation>}
     * @memberof PolicyRepresentation
     */
    'resourcesData'?: Set<ResourceRepresentation>;
    /**
     * 
     * @type {Set<ScopeRepresentation>}
     * @memberof PolicyRepresentation
     */
    'scopesData'?: Set<ScopeRepresentation>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PolicyRepresentation
     */
    'config'?: { [key: string]: string; };
}


/**
 * 
 * @export
 * @interface ProtocolMapperRepresentation
 */
export interface ProtocolMapperRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'protocol'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     */
    'protocolMapper'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProtocolMapperRepresentation
     * @deprecated
     */
    'consentRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProtocolMapperRepresentation
     * @deprecated
     */
    'consentText'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProtocolMapperRepresentation
     */
    'config'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ResourceOwnerRepresentation
 */
export interface ResourceOwnerRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ResourceOwnerRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceOwnerRepresentation
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ResourceRepresentation
 */
export interface ResourceRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ResourceRepresentation
     */
    'uris'?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'type'?: string;
    /**
     * 
     * @type {Set<ScopeRepresentation>}
     * @memberof ResourceRepresentation
     */
    'scopes'?: Set<ScopeRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'icon_uri'?: string;
    /**
     * 
     * @type {ResourceRepresentationOwner}
     * @memberof ResourceRepresentation
     */
    'owner'?: ResourceRepresentationOwner;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceRepresentation
     */
    'ownerManagedAccess'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     */
    'displayName'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ResourceRepresentation
     */
    'attributes'?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentation
     * @deprecated
     */
    'uri'?: string;
    /**
     * 
     * @type {Set<ScopeRepresentation>}
     * @memberof ResourceRepresentation
     */
    'scopesUma'?: Set<ScopeRepresentation>;
}
/**
 * 
 * @export
 * @interface ResourceRepresentationOwner
 */
export interface ResourceRepresentationOwner {
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentationOwner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRepresentationOwner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ResourceServerRepresentation
 */
export interface ResourceServerRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceServerRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceServerRepresentation
     */
    'allowRemoteResourceManagement'?: boolean;
    /**
     * 
     * @type {PolicyEnforcementMode}
     * @memberof ResourceServerRepresentation
     */
    'policyEnforcementMode'?: PolicyEnforcementMode;
    /**
     * 
     * @type {Array<ResourceRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    'resources'?: Array<ResourceRepresentation>;
    /**
     * 
     * @type {Array<PolicyRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    'policies'?: Array<PolicyRepresentation>;
    /**
     * 
     * @type {Array<ScopeRepresentation>}
     * @memberof ResourceServerRepresentation
     */
    'scopes'?: Array<ScopeRepresentation>;
    /**
     * 
     * @type {DecisionStrategy}
     * @memberof ResourceServerRepresentation
     */
    'decisionStrategy'?: DecisionStrategy;
}


/**
 * 
 * @export
 * @interface ScopeRepresentation
 */
export interface ScopeRepresentation {
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'iconUri'?: string;
    /**
     * 
     * @type {Array<PolicyRepresentation>}
     * @memberof ScopeRepresentation
     */
    'policies'?: Array<PolicyRepresentation>;
    /**
     * 
     * @type {Array<ResourceRepresentation>}
     * @memberof ScopeRepresentation
     */
    'resources'?: Array<ResourceRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ScopeRepresentation
     */
    'displayName'?: string;
}
/**
 * 
 * @export
 * @interface SourceFile
 */
export interface SourceFile {
    /**
     * 
     * @type {string}
     * @memberof SourceFile
     */
    'uri'?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceFile
     */
    'contents'?: string;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamName'?: string;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Team
     */
    'guestUsers'?: Array<Member>;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Team
     */
    'adminUsers'?: Array<Member>;
    /**
     * 
     * @type {Array<Member>}
     * @memberof Team
     */
    'users'?: Array<Member>;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'teamPath'?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'teamPathLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'userCount'?: number;
}

/**
 * CreateBucketApi - axios parameter creator
 * @export
 */
export const CreateBucketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/minio/createBucket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/minio/deleteBucket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/minio/deleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/minio/downloadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/minio/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateBucketApi - functional programming interface
 * @export
 */
export const CreateBucketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateBucketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBucket(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBucket(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBucket(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBucket(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreateBucketApi - factory interface
 * @export
 */
export const CreateBucketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateBucketApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(body?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.createBucket(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteBucket(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteFile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.downloadFile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(body?: string, options?: any): AxiosPromise<string> {
            return localVarFp.uploadFile(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreateBucketApi - object-oriented interface
 * @export
 * @class CreateBucketApi
 * @extends {BaseAPI}
 */
export class CreateBucketApi extends BaseAPI {
    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateBucketApi
     */
    public createBucket(body?: string, options?: AxiosRequestConfig) {
        return CreateBucketApiFp(this.configuration).createBucket(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateBucketApi
     */
    public deleteBucket(body?: string, options?: AxiosRequestConfig) {
        return CreateBucketApiFp(this.configuration).deleteBucket(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateBucketApi
     */
    public deleteFile(body?: string, options?: AxiosRequestConfig) {
        return CreateBucketApiFp(this.configuration).deleteFile(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateBucketApi
     */
    public downloadFile(body?: string, options?: AxiosRequestConfig) {
        return CreateBucketApiFp(this.configuration).downloadFile(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateBucketApi
     */
    public uploadFile(body?: string, options?: AxiosRequestConfig) {
        return CreateBucketApiFp(this.configuration).uploadFile(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomDashboardServiceApi - axios parameter creator
 * @export
 */
export const CustomDashboardServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomDashboardFileContent: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getCustomDashboardFileContent', 'name', name)
            const localVarPath = `/customDashboard/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomDashboardFilter} [names] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomDashboardFiles: async (names?: CustomDashboardFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customDashboard/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (names !== undefined) {
                localVarQueryParameter['names'] = names;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomDashboardFilesCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customDashboard/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomDashboardServiceApi - functional programming interface
 * @export
 */
export const CustomDashboardServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomDashboardServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomDashboardFileContent(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomDashboardFileContent(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CustomDashboardFilter} [names] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomDashboardFiles(names?: CustomDashboardFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomDashboardFiles(names, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomDashboardFilesCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomDashboardFilesCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomDashboardServiceApi - factory interface
 * @export
 */
export const CustomDashboardServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomDashboardServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomDashboardFileContent(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.getCustomDashboardFileContent(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomDashboardFilter} [names] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomDashboardFiles(names?: CustomDashboardFilter, options?: any): AxiosPromise<void> {
            return localVarFp.getCustomDashboardFiles(names, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomDashboardFilesCount(options?: any): AxiosPromise<void> {
            return localVarFp.getCustomDashboardFilesCount(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomDashboardServiceApi - object-oriented interface
 * @export
 * @class CustomDashboardServiceApi
 * @extends {BaseAPI}
 */
export class CustomDashboardServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomDashboardServiceApi
     */
    public getCustomDashboardFileContent(name: string, options?: AxiosRequestConfig) {
        return CustomDashboardServiceApiFp(this.configuration).getCustomDashboardFileContent(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomDashboardFilter} [names] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomDashboardServiceApi
     */
    public getCustomDashboardFiles(names?: CustomDashboardFilter, options?: AxiosRequestConfig) {
        return CustomDashboardServiceApiFp(this.configuration).getCustomDashboardFiles(names, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomDashboardServiceApi
     */
    public getCustomDashboardFilesCount(options?: AxiosRequestConfig) {
        return CustomDashboardServiceApiFp(this.configuration).getCustomDashboardFilesCount(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DataIndexServiceApi - axios parameter creator
 * @export
 */
export const DataIndexServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dataindex/jobs/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowInstancesCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dataindex/workflowInstances/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataIndexServiceApi - functional programming interface
 * @export
 */
export const DataIndexServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataIndexServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workflowInstancesCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workflowInstancesCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataIndexServiceApi - factory interface
 * @export
 */
export const DataIndexServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataIndexServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsCount(options?: any): AxiosPromise<void> {
            return localVarFp.jobsCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowInstancesCount(options?: any): AxiosPromise<void> {
            return localVarFp.workflowInstancesCount(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataIndexServiceApi - object-oriented interface
 * @export
 * @class DataIndexServiceApi
 * @extends {BaseAPI}
 */
export class DataIndexServiceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIndexServiceApi
     */
    public jobsCount(options?: AxiosRequestConfig) {
        return DataIndexServiceApiFp(this.configuration).jobsCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIndexServiceApi
     */
    public workflowInstancesCount(options?: AxiosRequestConfig) {
        return DataIndexServiceApiFp(this.configuration).workflowInstancesCount(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DenemeApi - axios parameter creator
 * @export
 */
export const DenemeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSecurityOidc: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service/test-security-oidc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSecurityOidcWithClaimsUserInfoMetadata: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service/test-security-oidc-claims-userinfo-metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DenemeApi - functional programming interface
 * @export
 */
export const DenemeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DenemeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSecurityOidc(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSecurityOidc(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSecurityOidcWithClaimsUserInfoMetadata(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSecurityOidcWithClaimsUserInfoMetadata(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DenemeApi - factory interface
 * @export
 */
export const DenemeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DenemeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSecurityOidc(options?: any): AxiosPromise<string> {
            return localVarFp.testSecurityOidc(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSecurityOidcWithClaimsUserInfoMetadata(options?: any): AxiosPromise<string> {
            return localVarFp.testSecurityOidcWithClaimsUserInfoMetadata(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DenemeApi - object-oriented interface
 * @export
 * @class DenemeApi
 * @extends {BaseAPI}
 */
export class DenemeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DenemeApi
     */
    public testSecurityOidc(options?: AxiosRequestConfig) {
        return DenemeApiFp(this.configuration).testSecurityOidc(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DenemeApi
     */
    public testSecurityOidcWithClaimsUserInfoMetadata(options?: AxiosRequestConfig) {
        return DenemeApiFp(this.configuration).testSecurityOidcWithClaimsUserInfoMetadata(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationRepositoryImplApi - axios parameter creator
 * @export
 */
export const OrganizationRepositoryImplApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptMembershipOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/acceptMembership`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/createOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuestFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteGuest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/deleteUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitedOrganizations: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getInvitedOrganizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAdmins: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationAdmins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationGuests: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationGuests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationsWithGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroupsAndUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/getOrganizationsWithGroupsAndUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ifUserCanAccessOrganizationGroups: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/ifUserCanAccessOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/InviteUserToOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAdminAsUserFromOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/moveToUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveUserAsAdminToOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/moveAsAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Keycloak required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationRepositoryImplApi - functional programming interface
 * @export
 */
export const OrganizationRepositoryImplApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationRepositoryImplApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptMembershipOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptMembershipOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdminFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdminFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGuestFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGuestFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvitedOrganizations(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitedOrganizations(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationAdmins(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationAdmins(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationGuests(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationGuests(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUsers(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUsers(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationsWithGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationsWithGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationsWithGroupsAndUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationsWithGroupsAndUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ifUserCanAccessOrganizationGroups(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ifUserCanAccessOrganizationGroups(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUserToOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUserToOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveAdminAsUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveAdminAsUserFromOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveUserAsAdminToOrganization(organization?: Organization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveUserAsAdminToOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationRepositoryImplApi - factory interface
 * @export
 */
export const OrganizationRepositoryImplApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationRepositoryImplApiFp(configuration)
    return {
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptMembershipOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.acceptMembershipOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.createOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.deleteAdminFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGuestFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.deleteGuestFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization(organization?: Organization, options?: any): AxiosPromise<PlainResponse> {
            return localVarFp.deleteOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.deleteUserFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitedOrganizations(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getInvitedOrganizations(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAdmins(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationAdmins(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationGuests(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationGuests(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationUsers(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations(options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroups(options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationsWithGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationsWithGroupsAndUsers(options?: any): AxiosPromise<string> {
            return localVarFp.getOrganizationsWithGroupsAndUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ifUserCanAccessOrganizationGroups(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.ifUserCanAccessOrganizationGroups(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToOrganization(organization?: Organization, options?: any): AxiosPromise<PlainResponse> {
            return localVarFp.inviteUserToOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAdminAsUserFromOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.moveAdminAsUserFromOrganization(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveUserAsAdminToOrganization(organization?: Organization, options?: any): AxiosPromise<string> {
            return localVarFp.moveUserAsAdminToOrganization(organization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationRepositoryImplApi - object-oriented interface
 * @export
 * @class OrganizationRepositoryImplApi
 * @extends {BaseAPI}
 */
export class OrganizationRepositoryImplApi extends BaseAPI {
    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public acceptMembershipOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).acceptMembershipOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public createOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).createOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteAdminFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteAdminFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteGuestFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteGuestFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public deleteUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).deleteUserFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getInvitedOrganizations(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getInvitedOrganizations(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationAdmins(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationAdmins(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationGuests(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationGuests(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationUsers(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationUsers(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizations(options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationsWithGroups(options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationsWithGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public getOrganizationsWithGroupsAndUsers(options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).getOrganizationsWithGroupsAndUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public ifUserCanAccessOrganizationGroups(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).ifUserCanAccessOrganizationGroups(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public inviteUserToOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).inviteUserToOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public moveAdminAsUserFromOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).moveAdminAsUserFromOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Organization} [organization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRepositoryImplApi
     */
    public moveUserAsAdminToOrganization(organization?: Organization, options?: AxiosRequestConfig) {
        return OrganizationRepositoryImplApiFp(this.configuration).moveUserAsAdminToOrganization(organization, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuarkusTopicsInformationResourceApi - axios parameter creator
 * @export
 */
export const QuarkusTopicsInformationResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopics: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/messaging/topics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuarkusTopicsInformationResourceApi - functional programming interface
 * @export
 */
export const QuarkusTopicsInformationResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuarkusTopicsInformationResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopics(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopics(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuarkusTopicsInformationResourceApi - factory interface
 * @export
 */
export const QuarkusTopicsInformationResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuarkusTopicsInformationResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopics(options?: any): AxiosPromise<void> {
            return localVarFp.getTopics(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuarkusTopicsInformationResourceApi - object-oriented interface
 * @export
 * @class QuarkusTopicsInformationResourceApi
 * @extends {BaseAPI}
 */
export class QuarkusTopicsInformationResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuarkusTopicsInformationResourceApi
     */
    public getTopics(options?: AxiosRequestConfig) {
        return QuarkusTopicsInformationResourceApiFp(this.configuration).getTopics(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SourceFilesResourceApi - axios parameter creator
 * @export
 */
export const SourceFilesResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceFileByProcessId: async (processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('getSourceFileByProcessId', 'processId', processId)
            const localVarPath = `/management/processes/{processId}/source`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [uri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceFileByUri: async (uri?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/processes/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceFilesByProcessId: async (processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('getSourceFilesByProcessId', 'processId', processId)
            const localVarPath = `/management/processes/{processId}/sources`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourceFilesResourceApi - functional programming interface
 * @export
 */
export const SourceFilesResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourceFilesResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSourceFileByProcessId(processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSourceFileByProcessId(processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [uri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSourceFileByUri(uri?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSourceFileByUri(uri, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSourceFilesByProcessId(processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SourceFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSourceFilesByProcessId(processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SourceFilesResourceApi - factory interface
 * @export
 */
export const SourceFilesResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourceFilesResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceFileByProcessId(processId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getSourceFileByProcessId(processId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [uri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceFileByUri(uri?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getSourceFileByUri(uri, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceFilesByProcessId(processId: string, options?: any): AxiosPromise<Array<SourceFile>> {
            return localVarFp.getSourceFilesByProcessId(processId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourceFilesResourceApi - object-oriented interface
 * @export
 * @class SourceFilesResourceApi
 * @extends {BaseAPI}
 */
export class SourceFilesResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceFilesResourceApi
     */
    public getSourceFileByProcessId(processId: string, options?: AxiosRequestConfig) {
        return SourceFilesResourceApiFp(this.configuration).getSourceFileByProcessId(processId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [uri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceFilesResourceApi
     */
    public getSourceFileByUri(uri?: string, options?: AxiosRequestConfig) {
        return SourceFilesResourceApiFp(this.configuration).getSourceFileByUri(uri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceFilesResourceApi
     */
    public getSourceFilesByProcessId(processId: string, options?: AxiosRequestConfig) {
        return SourceFilesResourceApiFp(this.configuration).getSourceFilesByProcessId(processId, options).then((request) => request(this.axios, this.basePath));
    }
}


